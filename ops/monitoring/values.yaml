# Victoria Metrics is a replacement for Prometheus and is mostly fully compatible
# This chart bundles a Grafana dependency and injects some useful dashboards into it
victoria-metrics-k8s-stack:

  # Install prometheus operator crds, allowing them to exist in the cluster without also installing Prometheus
  prometheus-operator-crds:
    enabled: true

  # Make ArgoCD not explode if a Prometheus CRD gets converted by VM
  victoria-metrics-operator:
    operator:
      disable_prometheus_converter: false
      prometheus_converter_add_argocd_ignore_annotations: true

  vmagent:
    spec:
      extraArgs:
        promscrape.streamParse: "true"
        # Store original labels in vmagent's memory by default. This increases the amount of memory used by vmagent
        # but makes vmagent debugging UI more informative. See: https://docs.victoriametrics.com/vmagent/#relabel-debug
        promscrape.dropOriginalLabels: "false"
      externalLabels:
        test: test

  grafana:
    # Inject env specific values
    envFromConfigMaps:
     - name: grafana
    # Inject Github OAuth credentials
    envFromSecret: grafana

    persistence:
      enabled: true
      existingClaim: grafana-pvc

    # Disable sidecar installing default dashboards to allow custom dashboards
    # https://docs.victoriametrics.com/helm/victoriametrics-k8s-stack/#adding-external-dashboards
    sidecar:
      dashboards:
        enabled: false

    # Disable lots of useless warnings on old dashboards that pull the "wrong" graphing applet
    # Grafana automatically converts them to the new format, so why complain?
    grafana.ini:
      security:
        angular_support_enabled: false
      auth.github:
        enabled: true
        allow_sign_up: true
        client_id: $__env{GITHUB_CLIENT_ID}
        client_secret: $__env{GITHUB_CLIENT_SECRET}
        scopes: read:org user:email
        auth_url: https://github.com/login/oauth/authorize
        token_url: https://github.com/login/oauth/access_token
        api_url: https://api.github.com/user
        org_name: FAForever
        org_mapping: $__env{GITHUB_ORG_MAPPING}
    admin:
      existingSecret: grafana
      userKey: admin-user
      passwordKey: admin-password

    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
          - name: 'FAF'
            orgId: 1
            folder: 'faf'
            type: file
            disableDeletion: true
            editable: true
            options:
              path: /var/lib/grafana/dashboards/faf

    dashboards:
      faf:
        argocd:
          url: https://raw.githubusercontent.com/argoproj/argo-cd/master/examples/dashboard.json
          datasource: prometheus

    additionalDataSources:
      - access: proxy
        isDefault: false # Don't change this, another one is default and it won't work
        name: loki
        orgId: 1
        type: loki
        url: http://monitoring-loki-gateway:80


# Configuring Loki is quite involved, as the Helm chart seems to be fully production grade for multi-tenant SaaS setups
# That is way, way too much for us
# VictoriaLogs is an alternative that we need to evaluate later
loki:

  deploymentMode: SingleBinary
  singleBinary:
    replicas: 1

  # Disable Simple Scalable
  read:
    replicas: 0
  backend:
    replicas: 0
  write:
    replicas: 0

  loki:
    commonConfig:
      replication_factor: 1
    storage:
      type: 'filesystem'
    auth_enabled: false

    schemaConfig:
      configs:
        - from: 2024-01-01
          store: tsdb
          index:
            prefix: index_
            period: 24h
          object_store: 'filesystem'
          schema: v13

    compactor:
      compaction_interval: 10m
      retention_enabled: true
      retention_delete_delay: 2h
      retention_delete_worker_count: 16
      delete_request_store: filesystem
    limits_config:
      retention_period: 168h

  # We know it's working
  test:
    enabled: false
  lokiCanary:
    enabled: false

  # Mofo uses 8GB of RAM by default
  # TODO: reverse engineer loki-stack further and/or move to victorialogs faster
  chunksCache:
    enabled: false


k8s-monitoring:
  # Where Alloy pushes data to
  # We can add our own Loki, Thanos...
  destinations:
    - name: local-loki
      type: loki
      url: http://monitoring-loki-gateway/loki/api/v1/push

  # We are using 1% of this chart, just logs for now, as it implements lots of things that vm-stack provides
  # We could switch to this + vmsingle

  # Collectors
  alloy-logs:
    enabled: true

  # Features
  podLogs:
    enabled: true